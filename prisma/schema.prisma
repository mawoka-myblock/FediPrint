// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "cargo prisma"
  output          = "../src/prisma.rs"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model Account {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  registeredAt DateTime @default(now())
  password     String
  email        String   @unique
  verified     String?  @default(dbgenerated("gen_random_uuid()"))
  profileId    String   @unique @db.Uuid
  privateKey   String
  profile      Profile  @relation(fields: [profileId], references: [id])
}

model Profile {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username     String
  server       String
  serverId     String    @unique
  displayName  String
  summary      String    @default("")
  inbox        String
  outbox       String
  publicKey    String
  registeredAt DateTime  @default(now()) @db.Date
  followers    Profile[] @relation("Followers")
  following    Profile[] @relation("Followers")
  // activities Activity[] @relation("Actor")
  notes        Note[]    @relation("Actor")
  likedNotes   Note[]    @relation("Likes")
  mentionedIn  Note[]    @relation("Mentions")
  boostedNotes Note[]    @relation("Boosts")
  account      Account?
}

enum EventAudience {
  Public
  Followers
  Mentioned
  Nobody
}

model Note {
  id                 BigInt        @id @default(autoincrement())
  createdAt          DateTime      @default(now())
  serverId           String?       @unique
  content            String
  hashtags           String[]
  audience           EventAudience
  mentions           Profile[]     @relation("Mentions")
  actor              Profile       @relation("Actor", references: [id], fields: [actorId])
  inReplyToComment   Note?         @relation("InReplyToComment", fields: [inReplyToCommentId], references: [id]) // Parent note/comment being replied to
  inReplyToCommentId BigInt?       @unique
  inReplyToNote      Note?         @relation("InReplyToNote", fields: [inReplyToNoteId], references: [id]) // Main post/note being replied to
  inReplyToNoteId    BigInt?       @unique
  likedBy            Profile[]     @relation("Likes")
  boostedBy          Profile[]     @relation("Boosts")
  actorId            String        @db.Uuid @unique
  repliesToNote      Note[]        @relation("InReplyToNote")
  repliesToComment   Note[]        @relation("InReplyToComment")
}

// Define the Activity table to store information about activities
// model Activity {
//   id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   type      String
//   actor     Profile  @relation("Actor", references: [id], fields: [actorId])
//   object    Object   @relation(fields: [objectId], references: [id])
//   objectId  String
//   published DateTime
//   actorId   String   @db.Uuid
// }

// // Define the Object table to store information about objects
// model Object {
//   id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   type     String
//   // Add more fields as needed for your specific use case
//   Activity Activity[]
// }
