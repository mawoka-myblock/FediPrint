// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "cargo prisma"
  output          = "../src/prisma.rs"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model Account {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  registeredAt DateTime @default(now())
  password     String
  email        String   @unique
  verified     String?  @default(dbgenerated("gen_random_uuid()"))
  profileId    String   @unique @db.Uuid
  privateKey   String
  profile      Profile  @relation(fields: [profileId], references: [id])
}

model Profile {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username     String
  server       String
  serverId     String    @unique
  displayName  String
  summary      String    @default("")
  inbox        String
  outbox       String
  publicKey    String
  registeredAt DateTime  @default(now()) @db.Date
  followers    Profile[] @relation("Followers")
  following    Profile[] @relation("Followers")
  // activities Activity[] @relation("Actor")
  notes        Note[]    @relation("Actor")
  likedNotes   Note[]    @relation("Likes")
  mentionedIn  Note[]    @relation("Mentions")
  boostedNotes Note[]    @relation("Boosts")
  account      Account?
  Printer      Printer[]
  File         File[]
  Model        Model[]
}

enum EventAudience {
  Public
  Followers
  Mentioned
  Nobody
}

model Note {
  id                 BigInt        @id @default(autoincrement())
  createdAt          DateTime      @default(now())
  serverId           String?       @unique
  content            String
  hashtags           String[]
  audience           EventAudience
  mentions           Profile[]     @relation("Mentions")
  actor              Profile       @relation("Actor", references: [id], fields: [actorId])
  inReplyToComment   Note?         @relation("InReplyToComment", fields: [inReplyToCommentId], references: [id]) // Parent note/comment being replied to
  inReplyToCommentId BigInt?       @unique
  inReplyToNote      Note?         @relation("InReplyToNote", fields: [inReplyToNoteId], references: [id]) // Main post/note being replied to
  inReplyToNoteId    BigInt?       @unique
  likedBy            Profile[]     @relation("Likes")
  boostedBy          Profile[]     @relation("Boosts")
  actorId            String        @unique @db.Uuid
  repliesToNote      Note[]        @relation("InReplyToNote")
  repliesToComment   Note[]        @relation("InReplyToComment")
  commentOfModel     Model?        @relation(fields: [commentOfModelId], references: [id])
  commentOfModelId   BigInt?
}

// Define the Activity table to store information about activities
// model Activity {
//   id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   type      String
//   actor     Profile  @relation("Actor", references: [id], fields: [actorId])
//   object    Object   @relation(fields: [objectId], references: [id])
//   objectId  String
//   published DateTime
//   actorId   String   @db.Uuid
// }

// // Define the Object table to store information about objects
// model Object {
//   id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   type     String
//   // Add more fields as needed for your specific use case
//   Activity Activity[]
// }

enum ModifiedScale {
  NoMods
  LightMods
  MediumMods
  HardMods
  NewPrinter
}

model Printer {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  name               String
  manufacturer       String
  profile            Profile       @relation(fields: [profileId], references: [id])
  profileId          String        @db.Uuid
  public             Boolean       @default(true)
  slicerConfig       String?
  slicerConfigPublic Boolean       @default(true)
  description        String?
  modifiedScale      ModifiedScale @default(NoMods)
}

model File {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  mimeType       String
  size           BigInt
  fileName       String?
  description    String?
  altText        String?
  thumbhash      String?
  previewFile    File?     @relation("PreviewFile", fields: [previewFileId], references: [id])
  previewFileId  String?   @unique @db.Uuid
  previewFor     File?     @relation("PreviewFile")
  toBeDeletedAt  DateTime? @default(dbgenerated("(NOW() + '30 days'::interval)"))
  profile        Profile   @relation(fields: [profileId], references: [id])
  profileId      String    @db.Uuid
  fileForModel   Model?    @relation("Images", fields: [fileFormodelId], references: [id])
  fileFormodelId BigInt?
  imageForModel  Model?    @relation("Files", fields: [imageFomodelId], references: [id])
  imageFomodelId BigInt?
}

model Model {
  id          BigInt   @id @default(autoincrement())
  server      String
  serverId    String?  @unique
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String   @db.Uuid
  published   Boolean  @default(false)
  title       String
  summary     String
  description String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      File[]   @relation("Images")
  files       File[]   @relation("Files")
  comments    Note[]
}
